%title LogBrowser设计文档 

=LogBrowser设计文档 =

%toc

==概述 ==
Logging 2.0上线，公司内越来越多的应用接入，各应用部门对及时快速准确获得相应日志的需求越来越高，也越来越多样化。 
目前我们已经提供了日志查询的应用LogView和日志转存功能。但还不能真正满足用户的需求。

为了提供给用户更好的服务与用户体验，现开启了这个新项目LogBrowser，提供给用户以直觉导航浏览式的方式查看日志。

当前Logging2.0自身的应用，数量已超过6个，主要有LogView TraceView，而且全都基于开源项目，架构也不统一，难以扩展与维护,
浪费了大量的人力资源，而且不能带来令人满意的回报。
接下来的目标就是将这些应用慢慢整合，最终合并成两个应用，一个用于提供数据的RestfulApi, 一个用于提供Web界面操作的LogBrowser.
接下来以这个项目为契机，开启这种进化。

Logging2.0当前后端的HBase设计也存在一定的问题，在查询速度与并发访问下表现并不能使人满意，存在大量浪费带宽的行为。
在此次项目开发中，也会使用新方案，改善这种情况。

==设计目标 ==
* *提供一个可扩展的应用基础架构*
  # 当前的应用会慢慢合并到LogBrowser中
  # 以后新开发的应用在LogBrowser中扩展
* *数据服务分离*
  # 开发Restful Api提供专门的数据服务
  # LogBrowser只提供界面服务，通过Ajax与Restful Api通信，获取相应数据

==总体架构 ==

{{log-browser.png}}

总体架构如上，分为三种角色: *数据源 * 、 *Restful Api接口* 、 *web应用*

===数据源 ===
数据源分为两种，HBase和MySql.

*HBase:*
* 用于存储海量的日志数据，主要包含四种结构化数据：log, span, metric, event
* HBase里的数据主要是通过HBaseWriter写进来的

*MySql:*
* MySql里主要用于存储Central Logging 2.0的辅助数据，比如元数据等。
  # 关于App的元数据（appId, product, server etc.)
  # 配置数据（日志的配置信息，metric namespace的配置信息）
* MySql中的数据来源有两种：第三方系统和通过 api 录入的
  # 第三方来源：app相关的元数据
  # api录入:配置信息

===Restful Api===
* 以上面两种数据源为基础，包装并暴露合理的api接口，提供数据服务
* 设计restful api分为三类
  # Meta Api.  `logging/apps` 获取所有的app列表
  # Config Api. `logging/config/agent-configs` 获取agent的日志配置
  # Data Api. `logging/data/logs?app=110101&startDate=2013-01-01 18:00:00` 获取某个app指定时间段的日志数据 
* restful api可以返回两种数据：xml json

===web应用 ===
* Log-Browser应用
* 以导航式方式查看日志数据
* 根据用户的点击导航，从restful api获取数据，以友好美观的方式呈现给用户

==程序结构 ==
当前Central-Logging 2.0的组成：

{{central-logging-project.png}}

Central-Logging 2.0中Log-Browser相关的将划分为三个子项目，挂在Central-Logging 2.0下面。
* *central-logging-domain:* 
  # 用于定义领域模型对应的java bean和相关信息，作为jar包被其他子项目依赖。
  # 基包: `com.ctrip.freeway.domain`
* *central-logging-restful:*
  # 用于开发Restful Api接口，将作为一个web 项目发布
  # 基包: `com.ctrip.framework.freeway.rest`
* *central-logging-web:*
  # 用户直接使用的产品，提供界面，作为web 项目发布。
  # 基包: `com.ctrip.framework.freeway.web`

==领域模型 ==
Central Logging 2.0中的数据模型分为四类:meta data(*元数据 *), configration data(*配置数据*), 
log data(*日志数据*: log metric span event), report data(*统计报表数据*).
这些领域模型对应的Java Bean在项目central-loggging-domain里定义

===元数据 ===
====成员及关系 ====
{{domain-meta-entity.png}}

元数据的领域模型主要是以App为核心展开的：
* *Product:* 代表一个产品。一个产品下可以有多个子应用
* *App:* 代表一个具体的应用。和Product的关系是多对一。
* *AppServer:* 代表运营环境中一台具体的服务器。服务器上可以运行一个具体的应用。
  * 上图中和App的关系是多个一，实际上可能是多对多，因为一台服务器上可以运行多个App.
* *AppService:* 代表一个被trace的服务，比如一个具体的WebService接口。和App的关系是多对一。
* *ServiceMethod:* 代表服务中的一个方法。比如某个WebService接口中的一个方法。

*总结:* 一个部品下可以有多个应用;一个应用可以有多台服务器;一个应用可以多个服务;一个服务可以有多个方法


====实体定义 ====

*Product:*
| 属性        | 类型   | 说明     |
|-------------|--------|----------|
| name        | String | 产品名称 |
| description | String | 产品描述 |

*App:*
| 属性        | 类型             | 说明                                          |
|-------------|------------------|-----------------------------------------------|
| appId       | String           | 公司分配给这个应用的一个应用号，通常为6位数字 |
| name        | String           | 应用名称                                      |
| description | String           | 应用描述                                      |
| appServers  | List<AppServer>  | 应用拥有的服务器列表                          |
| appServices | List<AppService> | 应用中被trace的服务列表                       |

*AppServer:*
| 属性        | 类型             | 说明                    |
|-------------|------------------|-------------------------|
| hostName    | String           | 服务器的hostName        |
| ip          | String           | 服务器的ip              |

*AppService:*
| 属性           | 类型                | 说明                 |
|----------------|---------------------|----------------------|
| name           | String              | service名称          |
| serviceMethods | List<ServiceMethod> | 服务所拥有的方法列表 |

*ServiceMethod:*
| 属性 | 类型   | 说明     |
|------|--------|----------|
| name | String | 方法名称 |


====数据来源 ====
无数数据的来源分为两种：
* Product App AppServer来自系统部的api, 我们定期更新
* AppService ServiceMethod是由我们的HBaseWriter收集的，通过Restful Api更新

===配置数据 ===
配置数据分为两类，一类是对Agent的配置信息，一类是对Metric Namespace的配置信息。

====Agent配置 ====
由类AgentConfig表示

{{domain-agent-config.png}}

*AgentConfig:*
| 属性             | 类型     | 说明                                                                                           |
|------------------|----------|------------------------------------------------------------------------------------------------|
| key              | String   | 指定的一个Key,将确定对谁生效。通常为一个appId或server ip, 特殊key:"global",代表agent的默认配置 |
| appLogEnabled    | boolean  | 表明是否开启日志                                                                               |
| traceEnabled     | boolean  | 表明是否开启trace                                                                              |
| metricEnabled    | boolean  | 表明是否开启metrics                                                                            |
| appLogLevel      | LogLevel | 日志级别，前提需要开启appLogEnabled                                                            |
| traceLogLevel    | LogLevel | trace中的日志级别，前提需要开启traceLogEnabled                                                 |
| flushPeriod      | int      | 毫秒，agent中打包chunk的频率                                                                   |
| maxMessageSize   | int      | KB，一条 log中message的最大size                                                                |
| urlLogSampleRate | double   | url trace的采样率                                                                              |

====Namespace配置 ====
目前只有metrics使用namespace, namespace决定了读写权限，和使用的hbase实例和table名称。

{{domain-namespace.png}}

* HBase代表一个HBase实例
* MetricNamespace代表一个metric namespace的定义
 
*HBase:*
| 属性     | 类型    | 说明                       |
|----------|---------|----------------------------|
| zkquorum | String  | Zookeeper 结点列表         |
| basePath | String  | HBase实例在HDFS中的路径    |
| isMeta   | boolean | HBase实例是否存储元数据    |
| isUnique | boolean | HBase实例是否存储unique id |

*MetricNamespace:*
| 属性      | 类型         | 说明                    |
|-----------|--------------|-------------------------|
| namespace | String       | namespace名称           |
| hbase     | HBase        | 使用的hbase实例         |
| tableName | String       | 使用的表名称            |
| readIps   | List<String> | 该namespace可读的白名单 |
| writeIps  | List<String> | 该namespace可写的白名单 |

===日志数据 ===
主要是我们Logging系统收集的四种结构化数据：log span metric event:

====成员及关系 ====
{{domain-log.png}}

* *BaseEventDomain:* 四种结构化数据的基类，基本上代表了数据来源。
* *Log:* 代表一条日志
* *Span:* 代表一个trace实例中的一个方法追踪，其中可以内嵌Log
* *Metric:* 代表一个度量的点
* *Event:* 代表一个事件

*总结:* Log可以单独记，也可以和Span关联起来，它们之间是多对0关系。
Span本身也可以组成树形结构，一个span可以有一个父span, 一个span可能有多个子span.
所以span与span之间是多对一的关系。

====实体定义 ====

*BaseEventDomain:* 
| 属性      | 类型   | 说明                        |
|-----------|--------|-----------------------------|
| type      | String | 数据分类，保留使用          |
| hostName  | String | 数据来源的服务器的host name |
| hostIP    | String | 数据来源的服务器的ip        |
| processId | String | 产生该数据的进程号          |
| threadId  | long   | 产生该数据的线程号          |

*Log:* 
| 属性        | 类型     | 说明                                                        |
|-------------|----------|-------------------------------------------------------------|
| rowKey      | String   | Log在Hbase中的row key                                       |
| logId       | long     | Log的id号，一般由agent产生，并不是全局唯一                  |
| logType     | LogType  | Log的类型                                                   |
| logLevel    | LogLevel | Log的level                                                  |
| traceId     | long     | Log产生时，如果存在trace,trace的Id号                        |
| spanRowKey  | String   | 如果Log是在某个Span生命周期记的，对应Span在HBase中的row key |
| source      | String   | Log的来源，比如某个类名                                     |
| title       | String   | 日志title                                                   |
| message     | String   | 日志内容                                                    |
| attributs   | String   | 日志附加属性，键值对                                        |
| createdTime | String   | 数据来源的服务器的host name                                 |

*Span:* 
| 属性         | 类型     | 说明                                        |
|--------------|----------|---------------------------------------------|
| rowKey       | String   | Span在Hbase中的row key                      |
| serviceName  | String   | 对应的service name                          |
| spanName     | String   | 对应的service的method name                  |
| spanType     | SpanType | Log的level                                  |
| traceId      | long     | span所属trace的Id号                         |
| spanId       | long     | span的id号，一般由agent产生，并不是全局唯一 |
| parentId     | long     | 此span父span的id号                          |
| startTime    | String   | span的开始时间                              |
| stopTime     | String   | span的结束时间                              |
| isUnfinished | String   | 此span是否是正常结束的，通过stop方法        |

*Metric:* 
| 属性            | 类型            | 说明                                    |
|-----------------|-----------------|-----------------------------------------|
| name            | String          | metric的名称                            |
| namespace       | String          | metric所属的namespace, 用于目的地和安全 |
| value           | String          | metric这个点的值                        |
| metricValueType | MetricValueType | 值的类型                                |
| tags            | List<Attribute> | 这个metric的tag value对                 |
| createdTime     | long            | 此metric的创建时间                      |

*Event:* 
| 属性        | 类型            | 说明                |
|-------------|-----------------|---------------------|
| name        | String          | 事件的名称          |
| namespace   | String          | 事件所属的namespace |
| attributes  | List<Attribute> | 事件的属性对        |
| createdTime | long            | 事件的创建时间      |

===统计报表数据 ===
Central Logging 2.0中为app统计一日志数据。

{{domain-statistics.png}}

用于表示一个app的一台server在一定时间范围内的各种日志level的数量。

*LogStatistics:* 
| 属性       | 类型   | 说明                      |
|------------|--------|---------------------------|
| appId      | String | 要统计的应用号            |
| hostName   | String | 要统计的server host name  |
| hostIP     | String | 要统计的server ip         |
| threadId   | long   | 要统计的线程号            |
| startTime  | long   | 统计开始的时间            |
| dateRange  | long   | 要统计的时间长度          |
| debugCount | long   | 统计范围内debug log的数量 |
| infoCount  | long   | 统计范围内info log的数量  |
| warnCount  | long   | 统计范围内warn log的数量  |
| errorCount | long   | 统计范围内error log的数量 |

==Restful Api 接口 ==
为了实现数据分离，接口化。需要把CentralLogging 2中所有的内部通信和外部接口包装成Restful 的接口。

{{logging-rest.png|logging-rest.png|style="width:900px"}}

===设计理念 ===

*在Restful Api中，主要将前面定义的领域模型转换成Restful中的资源，对这些资源进行查询，创建，更新等操作，而支持的资源表现形式为XML和JSON.*

如上图，把Restful Api分为四类：meta, config, data, report
* *meta:* 元数据接口，比如公司的产品信息，数据中心信息，服务器信息，应用信息等。
* *config:* 配置接口，所有和配置相关的api放在这个类别下面。比如agent的配置，metrics的namespace配置。
* *data:* 数据接口，主要用于暴露logging收集到的结构化数据。比如根据数据查询日志数据
* *report:* 统计报表数据，用于暴露logging自身统计的一些数据。比如每个app记录日志的情况
 
===接口定义 ===

====Meta Api====

 *产品相关:*
 
| Api 地址                                 | 支持的方法 | 请求 | 返回     | 描述               |
|------------------------------------------|------------|------|----------|--------------------|
| _*/logging/meta/products*_               | >          | >    | >        | >                  |
|                                          | GET        | NA   | JSON/XML | 获取所有的产品列表 |
| _*/logging/meta/products/{productCode}*_ | >          | >    | >        | >                  |
|                                          | GET        | NA   | JSON/XML | 获取指定产品的信息 |

*数据中心相关:* 
 
| Api 地址                         | 支持的方法 | 请求 | 返回     | 描述                   |
|----------------------------------|------------|------|----------|------------------------|
| _*/logging/meta/idcs*_           | >          | >    | >        | >                      |
|                                  | GET        | NA   | JSON/XML | 获取所有的数据中心列表 |
| _*/logging/meta/idcs/{idcCode}*_ | >          | >    | >        | >                      |
|                                  | GET        | NA   | JSON/XML | 获取指定数据中心的信息 |

*应用相关:*
 
| Api 地址                                                                  | 支持的方法 | 请求         | 返回     | 描述                                                                           |
|---------------------------------------------------------------------------|------------|--------------|----------|--------------------------------------------------------------------------------|
| _*/logging/meta/apps*_                                                    | >          | >            | >        | >                                                                              |
|                                                                           | GET        | Query String | JSON/XML | 获取应用列表，可以根据条件过虑，比如通过Query String指定返回某个产品的所有应用 |
| _*/logging/meta/apps/{appId}*_                                            | >          | >            | >        | >                                                                              |
|                                                                           | GET        | NA           | JSON/XML | 获取指定应用的信息                                                             |
| _*/logging/meta/apps/{appId}/appServices*_                                | >          | >            | >        | >                                                                              |
|                                                                           | GET        | NA           | JSON/XML | 获取某个应用的开启过trace的service列表                                         |
| _*/logging/meta/apps/{appId}/appServices/{serviceName}*_                  | >          | >            | >        | >                                                                              |
|                                                                           | GET        | NA           | JSON/XML | 获取某个应用的某个具体的Service                                                |
| _*/logging/meta/apps/{appId}/appServices/{serviceName}/service-methods*_ | >          | >            | >        | >                                                                              |
|                                                                           | GET        | NA           | JSON/XML | 获取某个应用的某个具体的Service的所有追踪过的方法                              |
|                                                                           | POST       | String       | NA       | 为某个应用的某个具体的Service添加一个追踪过的方法                              |

====Configration Api====

*Agent配置相关:*

| Api 地址                                                              | 支持的方法 | 请求     | 返回     | 描述                                              |
|-----------------------------------------------------------------------|------------|----------|----------|---------------------------------------------------|
| _*/logging/config/agent-configs*_                                     | >          | >        | >        | >                                                 |
|                                                                       | GET        | NA       | JSON/XML | 获取所有的Agent配置列表                           |
|                                                                       | POST       | JSON/XML | NA       | 增加一个具体Agent的配置                           |
| _*/logging/config/agent-configs/{key:appId or ip}*_                   | >          | >        | >        | >                                                 |
|                                                                       | GET        | NA       | JSON/XML | 获取一个具体agent的配置信息                       |
|                                                                       | PUT        | JSON/XML | NA       | 更新一个具体agent的配置信息                       |

*Metric Namespace配置相关:*

| Api 地址                                              | 支持的方法 | 请求 | 返回     | 描述                                     |
|-------------------------------------------------------|------------|------|----------|------------------------------------------|
| _*/logging/config/metric-namespaces*_                 | >          | >    | >        | >                                        |
|                                                       | GET        | NA   | JSON/XML | 获取所有的metric namespace的配置列表     |
| _*/logging/config/metric-namespaces/{namespaceName}*_ | >          | >    | >        | >                                        |
|                                                       | GET        | NA   | JSON/XML | 获取一个具体的metric namespace的配置信息 |

====Data Api====
| Api 地址                          | 支持的方法 | 请求         | 返回     | 描述                                                               |
|-----------------------------------|------------|--------------|----------|--------------------------------------------------------------------|
| _*/logging/data/logs*_            | >          | >            | >        | >                                                                  |
|                                   | GET        | Query String | JSON/XML | 根据查询条件获取日志列表，比如某个app某个时间段内所有的Error日志   |
| _*/logging/data/logs/{rowKey}*_   | >          | >            | >        | >                                                                  |
|                                   | GET        | NA           | JSON/XML | 获取一条具体的日志                                                 |
| _*/logging/data/spans*_           | >          | >            | >        | >                                                                  |
|                                   | GET        | Query String | JSON/XML | 根据查询条件获取追踪信息，比如某个traceId,获取一次追踪中所有的span |
| _*/logging/data/spans/{rowKey}*_  | >          | >            | >        | >                                                                  |
|                                   | GET        | NA           | JSON/XML | 获取一条具体的span                                                 |
| _*/logging/data/events*_          | >          | >            | >        | >                                                                  |
|                                   | GET        | Query String | JSON/XML | 根据查询条件获取事件列表，比如某个app某个时间段内所有的事件        |
| _*/logging/data/events/{rowKey}*_ | >          | >            | >        | >                                                                  |
|                                   | GET        | NA           | JSON/XML | 获取一条具体的事件                                                 |

====Report Api====

| Api 地址                | 支持的方法 | 请求         | 返回     | 描述                                                                      |
|-------------------------|------------|--------------|----------|---------------------------------------------------------------------------|
| _*/logging/report/log*_ | >          | >            | >        | >                                                                         |
|                         | GET        | Query String | JSON/XML | 根据查询条件获取日志统计信息，比如某个app某个时间段内日志每小时的分布情况 |

===核心设计 ===

====元数据获取 ====
* product app server等元数据从第三方系统的获取
* _*ToDo:*_  详细设计

====查询日志数据====
* 查询参数的设计
* _*ToDo:*_  详细设计

====查询日志报表====
* 查询参数的设计
* 返回值的设计
* _*ToDo:*_  详细设计

==Log-Browser日志应用 ==
Log-Browser主要是前端应用，以直觉导航的方式供用户查看日志数据。

===页面流设计 ===                                                       

{{log-browser-page-flow.png}}

如上图页面流分为6张页面，也对应用户浏览日志的6个骤，从page 1到page 6.

====Page 1: 主页 ====
# 将作为Central Logging 2.0 web app的landing配置，各模块的入口。
# 比如浏览日志、搜索日志等

====Page 2: 产品列表 ====
# 在page 1点击浏览日志进入
# 此页面将列出公司的所有产品
# 从Restful Api `/logging/meta/products` 获取数据

====Page 3: 应用列表 ====
# 在page 2点击某个产品进入
# 此页面将列出该产品的所有应用
# 从Restful Api `/logging/meta/apps` 获取数据

====Page 4: 服务器列表 ====
# 在page 3点击某个应用进入
# 此页面将列出该应用的所有服务器
# 从Restful Api `/logging/meta/servers` 获取数据

====Page 5: 服务器日志报表 ====
# 在page 4点击某台服务器进入
# 此页面将列出该服务器日志报表，提供两种方式：
  # 按天查看每小时的日志统计
  # 按小时查看每五分钟的日志统计
# 从Restful Api `/logging/report/log` 获取数据

====Page 6: 日志列表 ====
# 在page 5做相点击进入进入
# 该页面可以查看一个小时内或五分钟内的日志详情
# 从Restful Api `/loggging/data/logs` 获取数据

===页面流方案二 ===                                                       
还有一种页面流方案，就是省略上一节的page 5, 直接从page 4到page 6.
而在page 4显示整个应用的日志统计信息。见下图。

其实两种方案并不冲突，可以并存！

{{log-browser-page-flow2.png}}

===页面逻辑设计 ===                                      
上面的页面，每个页面的逻辑结构是相似的，也应该持一致，这样可以保持项目维护。

{{log-browser-page-action.png}}

页面加载分为四个步骤：
# 从Log-Browser的Server上load页面               
# 通过ajax从Restful Api加载相应的数据
# 根据数据渲染页面
# 为页面组件注册相关js事件
# 用户解发js事件，有可能跳转页面，也有可能从 2 重新执行
  
===基础架构 ===
* _*ToDo:*_ 软件具体实现

==其他模块关联更改 ==

===HBase 日志查询优化 ===
在Central Logging 2.0中存储在HBase中的日志，目前的方案是有所缺陷和性能瓶颈的。

====现有方案及问题 ====
目前Log是通过HBaseWriter写表freeway.rawlog中的，而查询方案如下：

{{rawlog-old.png}}

日志查询实现总体分为两大步Scan和Filter,详细步骤如下：
# scan出100条记录，返回反序化成原始数据
# 逐条Filter,看是否满足查询条件，若满足就放入result待返回
# 查看result是否满足条数，满足返回
# 查看是否超时，超时返回，不超时执行1

*问题:*
# 使用逐条过滤，效率不高，容易超时
# 产生大量无效网络流量，使用客户端过滤, 每次都要取回原始log数据

====优化方案 ====
解决方案就是为rowlog表建立一张index表，查询时，先查index表，再查rawlog表

{{rawlog-new.png}}

新方案查询如下：
# 根据条件去sacan rawlogindex表
# 最终生成一个包含rawlog rowkey的列表
# 根据rowkey列表，从rawlog表中get出所需的数据
# 放入result返回

====rawlogindex表设计 ====
新方案的好坏很大一部分取决于步骤一，步骤一的目标：
# 更快
# 传输的数据更少
# 尽量在HBase端做过滤

所以，根据常用查询条件，设计rawlogindex表如下：
| rowkey | >    | >       | >  | >        | >  | >        | >        | >     | >             | column family:rawlog |
|--------|------|---------|----|----------|----|----------|----------|-------|---------------|----------------------|
| AppId  | Days | Seconds | DC | HostName | IP | ThreadId | LogLevel | LogId | AddtionalInfo | RowLog RowKey        |
| 3B     | 1B   | 3B      | 1B | 4B       | 1B | 1B       | 1B       | 1B    | 9B x 8 +7     | \/                   |

*rowkey组成:*

# *AppId:* 一数字,为了优化存储，足够散列，由原始appId计算获得: ???
# *Days:* 距离1970/01/01 00:00的天数对30取模
# *Seconds:* 倒序 距离一天结束的秒数，即 3600*24 - (Hour x 3600 + Seconds) , 
# *DC:* 数据中心，保留使用
# *HostName:* 对HostName取4字节的Hash 
# *IP:* 转换成数字
# *ThreadId:* 数字
# *LogLevel:* 数字 
# *LogId:* 数字 
# *AddtionalInfo:*
  # 共8对，每对间使用|分隔
  # 每对的key value使用:分隔
  # key和value都是长度4B, 是分别对原始key和vaue取Hash获得
  # 排好序

====写实现 ====
* HBaseWriter写log时需要同时写两张表
* _*ToDo:详细设计*_

====查询实现====
* 查询分两步，先查index,现取rawlog
* _*ToDo:详细设计*_

===HBase 日志统计 ===
为了更好的记录应用的情况，我们以分钟为单位统计每个应用的日志情况，在一分钟内的:

* Debug level的日志数量
* Info level的日志数量
* Warn level的日志数量
* Error level的日志数量

====表logstatistics设计====
| rowkey | >    | >     | >  | >        | >  | >        | >        | column family:log | >      | >      | >   | >       | >       |
|--------|------|-------|----|----------|----|----------|----------|-------------------|--------|--------|-----|---------|---------|
| AppId  | Days | Hours | DC | HostName | IP | ThreadId | LogLevel | totalCount        | count1 | count2 | ... | count59 | count60 |
| 3B     | 1B   | 3B    | 1B | 4B       | 1B | 1B       | 1B       | \/                | \/     | \/     | \/  | \/      | \/      |

====HBaseWriter 日志统计模块====
* _*ToDo:详细设计*_

==部署架构 ==
===域名 ===
===部署图 ===






