%title Operating Systems Design and Implementation

%toc

=Operating Systems Design and Implementation =

* 软件分为系统软件和应用软件
  * 系统软件管理系统及应用程序
  * 应用软件执行用户最终所需要的功能
  * 最基本的系统软件就是操作系统
  * 它控制计算机的所有的资源并提供开发应用程序的基础
* virtual machine
  * 在裸机上加载一层软件来管理整个系统，为用户提供一套更容易理解与编程的接口
  * 这个接口叫virtual machine
  * 层软件号操作系统
* 微程序microprogram
  * 一层原始软件
  * 控制设备并向上一层提供一套更清晰的清晰的接口
  * 它实际上是一个解释器：也取得机器语言的指令，执行相应的指令
* 精简指令集计算机（Reduced Instruction Set Computer, RISC)
  * 没有微程序层
* 操作系统专指运行在内核态(kernel mode)或管态(supervisor mode)下的程序。
  * 它受硬件保护而免遭用户篡改
  * 命令解释器 编译器 编辑器运行在用户态(user mode), 它们是应用程序。
  
==什么是操作系统 ==
===操作系统作为虚拟机 ===
* 操作系统为用户提供一台等价的扩展计算机，或叫虚拟机，它比低层硬件更容易编程。

===操作系统作为资源管理器 ===
* 跟踪资源的使用状况、满足资源请求、提高资源利用率，及协调各程序和用户对资源的使用冲突。

==操作系统发展历史 ==
* 第一台数字计算机，英国数学家Charles Babbage设计，纯机械式，无操作系统
* 第一个程序员：Ada Lovelace,诗人拜伦的女儿。

===第一代计算机(1945 ~ 1955):真空管和插板  ===
* 每一台都专门设计，使用机器语言，没有编程语言，没有操作系统
 
===第二代计算机(1955 ~ 1965):晶体管和批处理系统  ===
* 卡片，磁带，批处理（读入一队作业，顺序执行），负责读入作业并输出结果的特殊程序就是操作系统的前身
 
===第三代计算机(1965 ~ 1980):集成电路芯片与多道程序  ===
* 当一个作业在等待io时，cpu就会空闲下来，很浪费
* *多道程序(multiprogramming):*
  # 将内存划分为几部分，每一部分存放一个作业
  # 当一个作业在等待io时，另一个作业可以使用cpu
* *spooling:*
  # Simultaneous Peripheral Operation On Line, 联机即时外设操作
  # 可以很快的将卡片上的作业读入磁盘。
* *分时系统(timesharing):*
  # 多道程序的变种
  # 每一个用户有一个终端
  # cpu轮流为它们服务
  # 可以为用户提供交互式服务
  # 每个用户感觉自己拥有一个完整的计算机
  # cpu空闲时可以执行后台大作业
* UNIX
* POSIX

===第四代计算机(1980 ~ NOW):个人计算机  ===
* 网络操作系统
* 分布式操作系统


==操作系统基本概念 ==

*系统调用*
* 由操作系统提供的操作系统与用户程序之间交互的 *扩展指令集*
* 两大类
* 与进程相关的 *系统调用*
* 与文件相关的 *系统调用*

===进程Process ===
*进程Process*
* 一个进程本质上是一个程序的 *执行*
*地址空间address space*
* 每个进程拥有自己的address space: 0 ~ 最大值
* address sapce 中有： 可执行程序， 程序数据， 程序的堆栈
*进程还包括：一组寄存器register 程序计数器program counter 指针stack pointer  其他硬件寄存器hardware register*
*进程表 process tabel:*
* 除address space之外的进程所有的信息都保存在一张表中
* 每一进程对应表中的一项
* process table 是一个结构数组或链表
*一个进程包括:*
* address space, 又叫内核映像core image
* process table中的一项
*进程间通信*

*中断和信号*

*一个挂起的进程，需要再运行，则需要把进程暂停前的所有信息都保存下来*


===文件File ===

===进程Process ===
* File
* Directory
* 9位保护码
* Mount
* 设备文件（Special File)
  * 块设备文件Block special files
  * 字符设备文件Character special files
* piple

===命令解释器Shell ===
* 它不是操作系统的一部分
* 这是终端用户与操作系统之间的一个重要接口

==系统调用System Calls ==
* POSIX标准

*进程管理Process Management:*
# 
  {{{ class="brush:c"
    //创建一个child process
    pid = fork();
    }}}
# 
  {{{ class="brush:c"
    //等待一个child process结束
    pid = waitpid (pid, &statloc, opts)
    }}}
# 
  {{{ class="brush:c"
    //老版本的waitpid
    s = waitpid (&status)
    }}}
# 
  {{{ class="brush:c"
    //替换一个进程的内核映象
    s = execve (name, argv, envp)
    }}}
# 
  {{{ class="brush:c"
    //结束进程执行返回一个状态码
    exit (status)
    }}}
# 
  {{{ class="brush:c"
    //设置数据段大小
    size = brk (addr)
    }}}
# 
  {{{ class="brush:c"
    //返回调用者进程号
    pid = getpid ()
    }}}
# 
  {{{ class="brush:c"
    //返回调用者组标识号
    pid = getpgrp ()
    }}}
# 
  {{{ class="brush:c"
    //创建一个会话并返回其组标识号
    pid = setsid ()
    }}}
# 用于调试
  {{{ class="brush:c"
    l = ptrace (req, pid, addr, data)
    }}}
    
    
*信号Signal*

# 
  {{{ class="brush:c"
    //定义对信号的处理工作
    s = sigaction (sig, &act, &oldact)
    }}}
# 
  {{{ class="brush:c"
    //从信号返回
    s = sigreturn (&context)
    }}}
#  
  {{{ class="brush:c"
    //检查或修改信号掩码mask
    s = sigprocmask (how, &set, &old)
    }}}
#  
  {{{ class="brush:c"
    //获得阻塞信息集合
    s = sigpending (set)
    }}}
#  
  {{{ class="brush:c"
    //替换信号掩码并挂起进程
    s = sigsuspend (sigmask)
    }}}
#  
  {{{ class="brush:c"
    //给进程发送一个信号
    s = kill (pid, sig)
    }}}
#  
  {{{ class="brush:c"
    //设置时间闹钟
    residual = alarm (seconds)
    }}}
#  
  {{{ class="brush:c"
    //挂起调用进程直到下一个信号
    s = pause ()   
    }}}
    

*文件管理File Management:*

#  
  {{{ class="brush:c"
    //创建一个新文件
    fd = creat (name, mode)
    }}}
#  
  {{{ class="brush:c"
    // 创建普通、设备文件或目录i节点
    fd = mknod (name, mode, addr)
    }}}
#  
  {{{ class="brush:c"
    //打开一个文件进行只读或读写操作
    fd = open (file, how, ...)
    }}}
#  
  {{{ class="brush:c"
    //关闭一个已打开的文件
    s = close (fd)
    }}}
#  
  {{{ class="brush:c"
    //从文件读数据到缓冲区
    n = read (fd, buffer, nbytes)
    }}}
#  
  {{{ class="brush:c"
    //从缓冲区将数据写入文件
    n = write (fd, buffer, nbytes)
    }}}
#  
  {{{ class="brush:c"
    //移动文件指针
    pos = lseek (fd, offset, whence)
    }}}
#  
  {{{ class="brush:c"
    //获取文件状态信息
    s = stat (name, &buf)
    }}}
#  
  {{{ class="brush:c"
    //获取文件状态信息
    s = fstat (fd, &buf)
    }}}
#  
  {{{ class="brush:c"
    //为打开的文件分配一个新的文件描述符
    fd = dup (fd)
    }}}
#  
  {{{ class="brush:c"
    //创建一个管道
    s = pipe (&fd[0])
    }}}
#  
  {{{ class="brush:c"
    //对文件时行特殊操作
    s = ioctl (fd, request, argp)
    }}}
#  
  {{{ class="brush:c"
    //检查文件的访问权限
    s = access (name, amode)
    }}}
#  
  {{{ class="brush:c"
    //重命名文件
    s = rename (old, new)
    }}}
#  
  {{{ class="brush:c"
    //文件加锁及其他操作
    s = fcntl (fd, cmd, ...)
    }}}
    
*目录及文件系统管理Dir. & File System Mgt:*
#  
  {{{ class="brush:c"
    //创建一个新目录
    s = mkdir (name, mode)
    }}}
#  
  {{{ class="brush:c"
    //删除一个目录
    s = rmdir (name)
    }}}
#  
  {{{ class="brush:c"
    //创建一个新项name2，它指向name1
    s = link (name1, name2)
    }}}
#  
  {{{ class="brush:c"
    //删除一个目录项
    s = unlink (name)
    }}}
#  
  {{{ class="brush:c"
    //挂一个文件系统
    s = mount (special, name, flag)
    }}}
#  
  {{{ class="brush:c"
    // Unmount a file system
    s = umount (special)
    }}}

===进程管理的系统调用Process management===
