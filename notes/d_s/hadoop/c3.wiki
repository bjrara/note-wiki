%title Hadoop File System
%toc
=Hadoop File System=
* 当数据集大小超过一台物理机器，需要对它分区存储到不同的机器上。
* 跨机器管理存储的文件系统称之为分布式文件系统，Distributed File System
* HDFS: Hadoop distributed file system.

==HDFS的设计 ==
* *超大文件:* MB GB TB PB 
* *流式数据访问:*
  * 一次写入，多次读入
  * 每次数据分析涉及数据集中的大部分或全部
* *商业硬件:* 并不需要运行在昂贵的可靠的商业硬件上
* *商业硬件:* 并不需要运行在昂贵的可靠的商业硬件上
* *低时间延迟的访问:*
  * 不适合低时间延迟的访问，比如几十毫秒
  * 为高吞吐量做的优化， 但可能会高时间延迟为代价
* *大量小文件:*
  * 元数据存储在Namenode上
  * 文件总数的大小依赖于Namenode的内存大小 
* *不支持多用户写和多用户同时修改:*
 
==HDFS ==
===数据块 ===
* *磁盘块:* 磁盘进行读写的最小单位, 一般为512字节
* 文件系统块是磁盘块的整数倍，一般为几千字节
* HDFS的块默认为64m
  * 小于一个块大小的文件不会占满一个块
  * 块设的大是为了最小化寻址开销
  * 块过大也不行，mapreduce一次处理一个块
  * 块的大小要根据实际情况来调整，比如寻址占传输时间的1/100
* 使用块的好处
  * 一个文件的大小可以大于任意一个磁盘的大小
  * 简化了存储子系统，文件的元数据不和块数据存储在一起
  * 适合备份和容错，任何一个块都有复本。
===namenode & datanode ===
* 管理者 工作者模式
* namenode:
  * 管理者
  * 管理文件系统的命名空间
  * 维护文件系统树及树内所的目录与文件
  * 信息以两个文件永久保存：命名空间镜像文件与编辑日志文件
  * 记录文件中每个块所在数据结点的信息，但不永久保存，系统启动时重建
* datanode:
  * 工作者
  * 存储校验数据块
  * 定期向namenode发送数据块列表
* 失去namenode等于失去文件系统，所namenode容错非常重要：
  * 备份namenode上的元数据，多份同进写
  * 使用辅助namenode, 定期合并编辑日志生成空间镜像
===命令行接口 ===
===基本文件系统操作 ===
{{{ class="brush:bash"
hadoop fs -help
  }}}
  
===Hadoop文件系统 ===
* 是一个气象的文件系统
* *HDFS只是它的一个实现 *
* 抽象类定义了一个文件系统接口：`org.apache.hadoop.fs.FileSystem`
* 还有很多其他实现：Local HDFS HFTP HSFTP HAR hfs FTP S3 

===接口 ===
* java
* C
* Thrift
* WebDev
* FUSE
* HDFS两种特定的
  * HTTP: namenode 50070; datanode 50075
  * FTP
===JAVA接口 ===
